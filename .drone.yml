kind: pipeline
name: default

clone:
  depth: 50

steps:
- name: notify on wechat work
  image: gnes/ci-base
  environment:
    BOT_ID:
      from_secret: gnes-wechat-botid
  commands:
  - >
    curl 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key='$BOT_ID \
       -H 'Content-Type: application/json' \
       -d '
       {
            "msgtype": "markdown",
            "text": {
                "content": "🍽 Start a CI pipeline for $DRONE_SOURCE_BRANCH submitted by $DRONE_COMMIT_AUTHOR\n
                > [View]($DRONE_REPO_LINK)"
            }
       }'

steps:
- name: setup ci environment
  image: gnes/ci-base
  commands:
  - mkdir -p .cache && ln -snf $(pwd)/.cache $HOME/.cache
  - export PIP_DOWNLOAD_CACHE=${pwd}.cache/pip_download_cache && export XDG_CACHE_HOME=${pwd}.cache/pip
  - printf "XDG_CACHE_HOME=$XDG_CACHE_HOME\nPIP_DOWNLOAD_CACHE=$PIP_DOWNLOAD_CACHE\n"
  - cat /proc/cpuinfo | grep flags
  - "python -c 'import tensorflow as tf; print(tf.__version__); a=tf.constant(1, tf.int32); print(tf.Session().run(a))'"

steps:
- name: pip-install gnes
  image: gnes/ci-base
  commands:
  - pip install -e .[all]

steps:
- name: check code style
  image: gnes/ci-base
  commands:
  - pylint gnes/**/*.py --exit-zero

steps:
- name: run unit test
  image: gnes/ci-base
  environment:
    GNES_ENV_SET: orange-ci
  commands:
  - python -m unittest tests/*.py

steps:
- name: notify on wechat work
  image: gnes/ci-base
  environment:
    BOT_ID:
      from_secret: gnes-wechat-botid
  commands:
  - >
    curl 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key='$BOT_ID \
       -H 'Content-Type: application/json' \
       -d '
       {
            "msgtype": "markdown",
            "text": {
                "content": "✅ Looks good to me. All tests passed!\n
                > Author: $DRONE_COMMIT_AUTHOR \n
                > Branch: $DRONE_SOURCE_BRANCH \n
                > [点击查看]($DRONE_REPO_LINK)"
            }
       }'

trigger:
  branch:
  - master
  event:
  - push