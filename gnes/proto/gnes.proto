syntax = "proto2";

package gnes;

message Array {
  // the actual array data, in bytes
  required bytes data = 1;

  // Specifies the shape (dimensions) of an array
  repeated uint32 shape = 2 [packed = true];

  // Specifies the data type of an array
  required string dtype = 3 [default = "float"];
}

message ArrayList {
  repeated Array arrays = 1;
}

message Document {
  // The unique document ID specified by third-party application
  required string id = 1;

  // The actual textual content of the document
  optional string text = 2;

  // Optional, the doc could also hold binary data, e.g., image
  optional Array data = 3;

  // If true the document has been parsed into several parts
  required bool is_parsed = 4 [default = false];

  // If true the content of document has been encoded as vectors
  required bool is_encoded = 5 [default = false];

  // The uuid generated by the system automatically
  optional string uuid = 6;

  // The document's text can be parsed/divided into sub-parts (e.g., sentences for text)
  repeated string parsed_texts = 7;

  // The document blob data can be divided into sub-parts (e.g., patches for an image)
  repeated Array parsed_blobs = 8;

  message Coordinate {
    repeated uint32 x = 1 [packed = true];
  }
  repeated Coordinate coordinates = 9;

  // The resulted encodes of the document
  repeated Array _encodes = 10;

  enum DocType {
    TEXT_DOC = 0;
    IMAGE_DOC = 1;
    VIDEO_DOC = 2;
  }
  required DocType doc_type = 11 [default = TEXT_DOC];
}

message Query {
  optional string text = 1;
  optional Array data = 2;
  required bool is_parsed = 3 [default = false];
  required bool is_encoded = 4 [default = false];
  repeated string parsed_texts = 5;
  repeated Array parsed_blobs = 6;
  repeated Array encodes = 7;
  optional uint32 top_k = 8 [default = 10];
}

message SearchRequest {
  required string _request_id = 1;
  required Query query = 2;
  optional uint32 time_out = 3;
}

message IndexRequest {
  required string _request_id = 1;
  repeated Document docs = 2;
  optional uint32 time_out = 3;
  // required bool update_model = 4 [default = False];
}

message SearchResponse {
  message Result {
    required string doc_id = 1;
    required float score = 2;
  }
  repeated Result results = 1;
  required uint32 size = 2;
}

message Message {
  optional string msg_id = 1;
  required string msg_type = 2;
  required string route = 3;
  required uint32 part_id = 4 [default = 0];
  required uint32 num_part = 5 [default = 1];
  enum Mode {
    QUERY = 0;
    INDEX = 1;
    TRAIN = 2;
  }
  required Mode mode = 6 [default = QUERY];
  repeated Document docs = 7;
  optional Query query = 8;
  // repeated string logs = 9;
}


