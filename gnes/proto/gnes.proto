syntax = "proto3";

package gnes;

message Array {
  // the actual array data, in bytes
  bytes data = 1;

  // Specifies the shape (dimensions) of an array
  repeated uint32 shape = 2 [packed = true];

  // Specifies the data type of an array
  string dtype = 3;
}

message ArrayList {
  repeated Array arrays = 1;
}


message Chunk {
  uint64 doc_id = 1;
  uint32 offset = 2;
  string text = 3;
  Array blob = 4;
  Array encode = 5;
  message Coordinate {
    repeated uint32 x = 1 [packed = true];
  }
  repeated Coordinate coordinates = 6;
}

message Document {
  // The unique document ID specified by third-party application
  uint64 id = 1;

  // Optional, the uuid generated by the system automatically
  string uuid = 2;

  // The actual textual content of the document
  string text = 3;

  // Optional, the doc could also hold binary data, e.g., image
  Array blob = 4;

  // If true the document has been divided into several chunks
  bool is_parsed = 5;

  bool is_encoded = 6;

  repeated string text_chunks = 7;

  repeated Array blob_chunks = 8;

  uint32 doc_size = 9;

  Array encodes = 10;

  enum DocType {
    TEXT_DOC = 0;
    IMAGE_DOC = 1;
    VIDEO_DOC = 2;
    MIX_DOC = 3;
  }
  DocType doc_type = 11;
}

message SearchResult {
  uint64 doc_id = 1;
  uint32 doc_size = 2;
  uint32 offset = 3;
  float score = 4;
  Chunk chunk = 5;
}

message Query {
  uint64 id = 1;
  string text = 2;
  Array blob = 3;
  Array encode = 4;
  repeated SearchResult results = 5;
  uint32 top_k = 6;
}

message SearchRequest {
  string _request_id = 1;
  Document doc = 2;
  uint32 top_k = 3;
  uint32 time_out = 4;
}

message IndexRequest {
  string _request_id = 1;
  repeated Document docs = 2;
  uint32 time_out = 3;
  bool update_model = 4;
}

message SearchResponse {
  repeated SearchResult data = 1;
  uint32 size = 2;
}

message IndexResponse {
  string message = 1;
}

message Message {
  string client_id = 1;
  string msg_id = 2;
  string msg_type = 3;
  string route = 4;
  uint32 part_id = 5;
  uint32 num_part = 6;
  enum Mode {
    QUERY = 0;
    INDEX = 1;
    TRAIN = 2;
  }
  Mode mode = 7;
  bool is_parsed = 8;
  bool is_encoded = 9;

  repeated Document docs = 10;
  repeated Query querys = 11;
  Document.DocType doc_type = 12;
}


service Gnes {
  // option (rpc_core.method_no_deadline) = true;
  // option (rpc_core.service_default_deadline_ms) = 5000;
  rpc Index (IndexRequest) returns (IndexResponse) {}
  rpc Search (SearchRequest) returns (SearchResponse) {}
}



