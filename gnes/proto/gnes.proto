syntax = "proto3";
import "google/protobuf/timestamp.proto";

package gnes;

message NdArray {
    // the actual array data, in bytes
    bytes data = 1;

    // Specifies the shape (dimensions) of an array
    repeated uint32 shape = 2 [packed = true];

    // Specifies the data type of an array
    string dtype = 3;
}

message Chunk {
    // indicate where this chunk comes from
    uint64 doc_id = 1;

    // enforce at most one field will be set at the same time
    oneof content {
        // the original text of the chunk (only apply to text document)
        string text = 2;

        // the original ndarry of the chunk (apply to image/video documents)
        NdArray blob = 3;
    }

    message Coordinate {
        repeated uint32 x = 1 [packed = true];
    }

    // the 1-dim offset of the chunk wrt. the document (apply to text document)
    uint32 offset_1d = 4;

    // the n-dim offset of the chunk wrt. the document (apply to image/video document)
    Coordinate offset_nd = 5;
}

message Document {
    // The unique document ID
    uint64 doc_id = 1;

    // list of the chunks of the document
    repeated Chunk chunks = 2;

    // the vector encode of this chunk
    NdArray chunk_embeddings = 3;

    enum DocType {
        UNKNOWN = 0;
        TEXT = 1;
        IMAGE = 2;
        VIDEO = 3;
    }

    // document type
    DocType doc_type = 4;
}

message Envelope {
    // unique id of the sender of the message
    string client_id = 1;

    // unique id of the request
    string request_id = 2;

    // for multi-part message
    uint32 part_id = 3;
    uint32 num_part = 4;

    uint32 timeout = 5;

    // list of string represent the route of the message
    message route {
        string service = 1;
        google.protobuf.Timestamp timestamp = 2;
    }
    repeated route routes = 6;
}

message BaseMessage {
    Envelope envelope = 1;

    oneof inner {
        BaseRequest request = 2;
        BaseResponse response = 3;
    }
}

// define Request
message BaseRequest {
    oneof inner {
        TrainRequest train = 1;
        IndexRequest index = 2;
        QueryRequest query = 3;
        ControlRequest control = 4;
    }

    message TrainRequest {
        repeated Document docs = 1;
    }

    message IndexRequest {
        repeated Document docs = 1;
    }

    message QueryRequest {
        Document query = 1;
        uint32 top_k = 2;
    }

    message ControlRequest {
        string command = 1;
    }
}

message QueryResult {

    message TopKChunks {

        message ScoredChunk {
            Chunk chunk = 1;
            float score = 2;
        }

        repeated ScoredChunk topk_chunks = 1;
    }

    repeated TopKChunks result = 2;
}

// define Response
message BaseResponse {

    enum Status {
        SUCCESS = 0;
        ENCODER_ERROR = 1;
        INDEX_ERROR = 2;
        PROXY_ERROR = 3;
        UNKNOWN_ERROR = 4;
    }

    Status status = 1;

    QueryResult body = 2;
}


service GnesService {
    // option (rpc_core.method_no_deadline) = true;
    // option (rpc_core.service_default_deadline_ms) = 5000;
    rpc Train (BaseMessage) returns (BaseMessage) {
    }
    rpc Index (BaseMessage) returns (BaseMessage) {
    }
    rpc Query (BaseMessage) returns (BaseMessage) {
    }
}
